В проекте несколько приложений:

1. video_analyzer - для отправки на сервер параметров кликов пользователя по видеофайлу с Youtube.
2. object_detection - для загрузки на сервер и предварительной обработки видеофайла, скачанного с Youtube.
3. ... - для сравнения json-файла от клиента с json-файлом - результатом предварительной обработки видеофайла.
4. ... - продукты
5. ... - пользователи
6. ... - ордеры, заказы и оплаты

1. Приложение video_analyzer:

Здесь принимаем POST-запрос от клиента, сохраняем нужные данные в базу,
в частности user_id (если он есть), user_ip (ip-адрес клиента), video_id (идентификатор видео),
file_path (путь, по которому сохраняется файл в папку media), cookie_value (куки, если они будут нужны).
Затем по этим данным из базы можно будет найти файл. В названии файла отражены user_id, user_ip, video_id.
В файле данные представлены в виде списка словарей, при каждом новом POST-запросе от клиента, если имя файла
то же (user_id, user_ip, video_id те же) - то в список добавляется ещё один словарь с координатами клика,
таймингом клика и идентификатором видео. Таким образом формируется список.

POST-запрос от клиента формируется расширением браузера, которое находится в директории extension.
Это расширение нужно установить в браузер, и тогда при клике по участку видео из Youtube - на сервер улетает POST-запрос.

Файл сохраняется в директорию media/client_files.
Пример имени файла: None_127.0.0.1_VESeA6leQuk&list=PLA0M1Bcd0w8yv0XGiF1wjerjSZVSrYbjh&index=37.json
Здесь:
None - это user_id,
127.0.0.1 - это сервер,
VESeA6leQuk&list=PLA0M1Bcd0w8yv0XGiF1wjerjSZVSrYbjh&index=37 - это идентификатор файла. Он формируется из URL видео
(https://www.youtube.com/watch?v=VESeA6leQuk&list=PLA0M1Bcd0w8yv0XGiF1wjerjSZVSrYbjh&index=37)

Пример сохраняемого json-файла:
[
  {
    "x": 431.0625,
    "y": 255,
    "timestamp": 2.983575,
    "videoId": "VESeA6leQuk&list=PLA0M1Bcd0w8yv0XGiF1wjerjSZVSrYbjh&index=37"
  },
  {
    "x": 431.0625,
    "y": 254,
    "timestamp": 4.521985,
    "videoId": "VESeA6leQuk&list=PLA0M1Bcd0w8yv0XGiF1wjerjSZVSrYbjh&index=37"
  }
]
Здесь:
"x", "y" - это координаты клика по видеофайлу,
"timestamp" - время, в которое был произведён клик, от момента начала воспроизведения видеофайла,
"videoId" - идентификатор видео, он же присутствует в имени файла.


2. Приложение object_detection:

Здесь мы загружаем на сервер видеофайл и он обрабатывается в ProcessVideo(APIView).

POST-запрос по адресу http://127.0.0.1:8000/processing/video/16/start:
{"object_labels": {"1": "person", "2": "bicycle" } }


Подробнее об обработке файла:


Пример сохраняемого json-файла:
[
  {
    "coordinates": [
      39,
      15,
      1184,
      707
    ],
    "confidence": 0.700934648513794,
    "timestamp": 3.3333333333333335,
    "item_name": "person",
    "article_fragment": "123",
    "additional_identifier": "456"
  },
  {
    "coordinates": [
      46,
      21,
      1182,
      709
    ],
    "confidence": 0.6615978479385376,
    "timestamp": 10.0,
    "item_name": "person",
    "article_fragment": "123",
    "additional_identifier": "456"
  },
.......

Здесь:
"coordinates": [xmin, ymin, xmax, ymax],  # Координаты границ объекта
"confidence": float(score),  # Оценка объекта
"timestamp": timestamp,  # Временная метка объекта
"item_name": object_labels[cls], (название определяемого объекта)
"article_fragment": "123", (часть артикула продукта, по которой найдём нужный продукт в БД)
"additional_identifier": "456" (дополнительный идентификатор для добавления к продукту)

Пример имени json-файла, полученного в результате
обработки видеофайла VESeA6leQuk&list=PLA0M1Bcd0w8yv0XGiF1wjerjSZVSrYbjh&index=37.mp4:
VESeA6leQuk&list=PLA0M1Bcd0w8yv0XGiF1wjerjSZVSrYbjh&index=37_detections.json
Здесь VESeA6leQuk&list=PLA0M1Bcd0w8yv0XGiF1wjerjSZVSrYbjh&index=37 - это идентификатор видеофайла, то есть
перед загрузкой в директорию media/source_video_files видеофайла, необходимо присвоить ему правильное имя,
соответствующее идентификатору этого видео на Youtube.

